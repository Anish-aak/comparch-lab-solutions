$date
	Wed Nov 15 17:35:24 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_intg $end
$var wire 13 ! y [12:0] $end
$var reg 1 " clock $end
$var reg 1 # reset $end
$var reg 4 $ x [3:0] $end
$scope module circuit $end
$var wire 1 " clock $end
$var wire 1 # reset $end
$var wire 4 % x [3:0] $end
$var wire 13 & y [12:0] $end
$var wire 9 ' muxVal [8:0] $end
$var wire 1 ( accRst2 $end
$var wire 1 ) accRst1 $end
$scope module accRst $end
$var wire 1 " clock $end
$var wire 1 # reset $end
$var wire 4 * qout [3:0] $end
$var wire 4 + qbarout [3:0] $end
$var wire 1 ( acc_rst2 $end
$var wire 1 ) acc_rst1 $end
$scope module ff1 $end
$var wire 1 " clock $end
$var wire 1 , d $end
$var wire 1 # reset $end
$var reg 1 - q $end
$var reg 1 . qbar $end
$upscope $end
$scope module ff2 $end
$var wire 1 / clock $end
$var wire 1 0 d $end
$var wire 1 # reset $end
$var reg 1 1 q $end
$var reg 1 2 qbar $end
$upscope $end
$scope module ff3 $end
$var wire 1 3 clock $end
$var wire 1 4 d $end
$var wire 1 # reset $end
$var reg 1 5 q $end
$var reg 1 6 qbar $end
$upscope $end
$scope module ff4 $end
$var wire 1 7 clock $end
$var wire 1 8 d $end
$var wire 1 # reset $end
$var reg 1 9 q $end
$var reg 1 : qbar $end
$upscope $end
$upscope $end
$scope module adderReg $end
$var wire 1 ) acc_rst1 $end
$var wire 1 ( acc_rst2 $end
$var wire 1 " clock $end
$var wire 13 ; y [12:0] $end
$var wire 9 < muxVal [8:0] $end
$var reg 13 = acc [12:0] $end
$upscope $end
$scope module mux $end
$var wire 4 > x [3:0] $end
$var wire 9 ? outp [8:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 ?
b0 >
b0 =
b0 <
b0 ;
1:
09
18
07
16
05
14
03
12
01
10
0/
1.
0-
1,
b1111 +
b0 *
0)
0(
b0 '
b0 &
b0 %
b0 $
1#
0"
b0 !
$end
#8
1"
#16
0,
1/
10
03
14
07
0)
18
0(
0.
1-
12
01
16
05
b1110 +
1:
b1 *
09
0"
0#
#24
1,
0/
b1111 +
1.
b0 *
0-
1"
b11111010 '
b11111010 <
b11111010 ?
b1010 $
b1010 %
b1010 >
#32
0"
#40
08
1(
0:
19
04
17
1)
06
15
00
13
02
11
0,
1/
b0 +
0.
b1111 *
1-
1"
b1111101 '
b1111101 <
b1111101 ?
b101 $
b101 %
b101 >
#48
0"
#56
1,
0/
b1 +
1.
b1110 *
0-
b100101100 !
b100101100 &
b100101100 ;
b100101100 =
1"
b100101100 '
b100101100 <
b100101100 ?
b1100 $
b1100 %
b1100 >
#64
0"
#72
10
03
12
01
0,
1/
b10 +
0.
b1101 *
1-
b101000101 !
b101000101 &
b101000101 ;
b101000101 =
1"
b11001 '
b11001 <
b11001 ?
b1 $
b1 %
b1 >
#80
0"
#88
1,
0/
b11 +
1.
b1100 *
0-
b1010001010 !
b1010001010 &
b1010001010 ;
b1010001010 =
1"
b101000101 '
b101000101 <
b101000101 ?
b1101 $
b1101 %
b1101 >
#96
0"
#104
14
07
0)
16
05
00
13
02
11
0,
1/
b100 +
0.
b1011 *
1-
b1100111001 !
b1100111001 &
b1100111001 ;
b1100111001 =
1"
b10101111 '
b10101111 <
b10101111 ?
b111 $
b111 %
b111 >
#112
0"
#120
1,
0/
b101 +
1.
b1010 *
0-
1"
b11100001 '
b11100001 <
b11100001 ?
b1001 $
b1001 %
b1001 >
#128
0"
#136
10
03
12
01
0,
1/
b110 +
0.
b1001 *
1-
1"
b110010 '
b110010 <
b110010 ?
b10 $
b10 %
b10 >
#144
0"
#152
1,
0/
b111 +
1.
b1000 *
0-
1"
b100010011 '
b100010011 <
b100010011 ?
b1011 $
b1011 %
b1011 >
#160
0"
#168
b0 !
b0 &
b0 ;
b0 =
18
0(
1:
09
04
17
1)
06
15
00
13
02
11
0,
1/
b1000 +
0.
b111 *
1-
1"
b1111101 '
b1111101 <
b1111101 ?
b101 $
b101 %
b101 >
#176
0"
#184
1,
0/
b1001 +
1.
b110 *
0-
b1100100 !
b1100100 &
b1100100 ;
b1100100 =
1"
b1100100 '
b1100100 <
b1100100 ?
b100 $
b100 %
b100 >
#192
0"
#200
10
03
12
01
0,
1/
b1010 +
0.
b101 *
1-
b10010110 !
b10010110 &
b10010110 ;
b10010110 =
1"
b110010 '
b110010 <
b110010 ?
b10 $
b10 %
b10 >
#208
0"
#216
1,
0/
b1011 +
1.
b100 *
0-
b11001000 !
b11001000 &
b11001000 ;
b11001000 =
1"
#224
0"
#232
14
07
0)
16
05
00
13
02
11
0,
1/
b1100 +
0.
b11 *
1-
b11111010 !
b11111010 &
b11111010 ;
b11111010 =
1"
#240
0"
#248
1,
0/
b1101 +
1.
b10 *
0-
1"
#256
0"
#264
10
03
12
01
0,
1/
b1110 +
0.
b1 *
1-
1"
#272
0"
#280
1,
0/
b1111 +
1.
b0 *
0-
1"
#288
0"
#296
b0 !
b0 &
b0 ;
b0 =
08
1(
0:
19
04
17
1)
06
15
00
13
02
11
0,
1/
b0 +
0.
b1111 *
1-
1"
#304
0"
#312
1,
0/
b1 +
1.
b1110 *
0-
b110010 !
b110010 &
b110010 ;
b110010 =
1"
#320
0"
#328
10
03
12
01
0,
1/
b10 +
0.
b1101 *
1-
b1100100 !
b1100100 &
b1100100 ;
b1100100 =
1"
#336
0"
#344
1,
0/
b11 +
1.
b1100 *
0-
b10010110 !
b10010110 &
b10010110 ;
b10010110 =
1"
#352
0"
#360
14
07
0)
16
05
00
13
02
11
0,
1/
b100 +
0.
b1011 *
1-
b11001000 !
b11001000 &
b11001000 ;
b11001000 =
1"
#368
0"
#376
1,
0/
b101 +
1.
b1010 *
0-
1"
#384
0"
#392
10
03
12
01
0,
1/
b110 +
0.
b1001 *
1-
1"
#400
0"
